// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  TEACHER
  STUDENT
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}

enum LessonStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      UserRole
  studentId String?  @unique // Only for students
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  teacherCourses Course[]           @relation("TeacherCourses")
  enrollments    Enrollment[]
  attendances    AttendanceRecord[]

  @@map("users")
}

model Faculty {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  departments Department[]

  @@map("faculties")
}

model Department {
  id          String   @id @default(cuid())
  name        String
  description String?
  facultyId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  faculty Faculty  @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  courses Course[]

  @@unique([name, facultyId])
  @@map("departments")
}

model Course {
  id           String   @id @default(cuid())
  code         String   @unique
  name         String
  description  String?
  credits      Int
  departmentId String
  teacherId    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  department  Department   @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  teacher     User         @relation("TeacherCourses", fields: [teacherId], references: [id], onDelete: Cascade)
  sections    Section[]
  enrollments Enrollment[]

  @@map("courses")
}

model Section {
  id        String   @id @default(cuid())
  name      String
  courseId  String
  schedule  String
  room      String
  capacity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  course      Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]
  enrollments Enrollment[]

  @@unique([name, courseId])
  @@map("sections")
}

model Enrollment {
  id        String   @id @default(cuid())
  studentId String
  courseId  String
  sectionId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course  Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  section Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@unique([studentId, courseId, sectionId])
  @@map("enrollments")
}

model Lesson {
  id        String       @id @default(cuid())
  sectionId String
  date      DateTime
  startTime String
  endTime   String
  topic     String
  status    LessonStatus @default(SCHEDULED)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // Relations
  section     Section            @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  attendances AttendanceRecord[]

  @@map("lessons")
}

model AttendanceRecord {
  id        String           @id @default(cuid())
  studentId String
  lessonId  String
  status    AttendanceStatus
  notes     String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  student User   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  lesson  Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([studentId, lessonId])
  @@map("attendance_records")
}